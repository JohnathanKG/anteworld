#pragma once

#ifndef _INTERGEN_GENERATED__plugin_interface_JS_H_
#define _INTERGEN_GENERATED__plugin_interface_JS_H_

//@file Javascript interface file for plugin_interface interface generated by intergen
//See LICENSE file for copyright and license information

#include "../plugin_interface.h"

#include <comm/intergen/ifc.js.h>
#include <comm/token.h>

namespace js {

class plugin_interface
{
public:

    ///Interface creator
    /// @param scriptpath path to js script to bind to
    static iref<::plugin_interface> get( const ::js::script_handle& script__, const coid::token& bindvar = coid::token(), v8::Handle<v8::Context>* ctx=0 )
    {
        typedef iref<::plugin_interface> (*fn_bind)(const ::js::script_handle&, const coid::token&, v8::Handle<v8::Context>*);
        static fn_bind binder = 0;
        static const coid::token ifckey = "plugin_interface.get@creator.js";

        if (!binder)
            binder = reinterpret_cast<fn_bind>(
                coid::interface_register::get_interface_creator(ifckey));

        if (!binder)
            throw coid::exception("interface binder inaccessible: ") << ifckey;

        return binder(script__, bindvar, ctx);
    }
};

} //namespace js


#endif //_INTERGEN_GENERATED__plugin_interface_JS_H_
