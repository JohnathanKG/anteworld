#pragma once

#ifndef _INTERGEN_GENERATED__video_recorder_H_
#define _INTERGEN_GENERATED__video_recorder_H_

//@file Interface file for video_recorder interface generated by intergen
//See LICENSE file for copyright and license information

//host class: ::framebuffer

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>

#include <ot/location_cfg.h>
#include <ot/sdm_types.h>

class framebuffer;


namespace ot {

////////////////////////////////////////////////////////////////////////////////

class video_recorder
    : public intergen_interface
{
public:

    // --- interface methods ---

    ///Turn the recording on/off
    //@return previous recording state. Also returns true if the built-in recording is active
    bool record( bool on );


protected:
    // --- interface events (callbacks from host to client) ---
    // ---       overload these to handle host events       ---

    friend class ::framebuffer;

    ///Initialize recording
    //@param video_folder path to user's configured video directory
    //@param width image width
    //@param height image height
    //@return true if recording should start
    virtual bool initialize( const coid::token& video_folder, int width, int height ) { return true; }

    ///Invoked when user presses the video recording key. Allows the plugin to intercept that and launch its own recording.
    //@note runs from a different thread than process_frame, so it should be used only for calling record()
    virtual void on_user_key( bool on ) {}

    /**Process YUV420 frame data
      @param data planar YUV420 frame data, ordered as interleaved rows of Y-U-Y-V
      @param size size of the data in bytes
      @param width effective width of the screen
      @param height effective height of the screen
      @param timestamp_ns frame render time [ns]
      @param nbatchframes 1 + the number of skipped/missed frames
      @param video_end true if the video capture ends with this frame

      The format is as follows: for two rows of image data
      - Y0 row data, bytes: width aligned to 4
      - U row data, bytes: width/2 aligned to 4
      - Y1 row data, bytes: width aligned to 4
      - V row data, bytes: width/2 aligned to 4
      An odd number of rows is extended by one.

      Strides:
        int w4 = (w+3)&~3
        int u4 = (w/2+3)&~3
        int h2 = (h+1)&~1

        Y stride:   w4 + u4
        U,V stride: 2*w4 + 2*u4
    **/
    virtual void process_frame( const void* data, uints size, uint64 timestamp_ns, uint nbatchframes, bool video_end ) {}

    ///[OBSOLETE]
    //@return true if plugin handles the capture
    virtual bool capture_screen( const coid::token& path, uint width, uint height, uint pitch, const void* data, uints size, const ot::location_info& info ) { return false; }

    virtual void force_bind_script_events() {}

public:
    // --- host helpers to check presence of handlers in scripts ---

    virtual bool is_bound_initialize() { return true; }
    virtual bool is_bound_on_user_key() { return true; }
    virtual bool is_bound_process_frame() { return true; }
    virtual bool is_bound_capture_screen() { return true; }

public:
    // --- creators ---

    static iref<video_recorder> create() {
        return create<video_recorder>(0);
    }

    template<class T>
    static iref<T> create( T* _subclass_ );

    // --- internal helpers ---

    virtual ~video_recorder() {
        if (_cleaner)
            _cleaner(this, 0);
    }

    ///Interface revision hash
    static const int HASHID = 2946773048u;

    ///Interface name (full ns::class string)
    static const coid::tokenhash& IFCNAME() {
        static const coid::tokenhash _name = "ot::video_recorder"_T;
        return _name;
    }

    int intergen_hash_id() const override final { return HASHID; }

    bool iface_is_derived( int hash ) const override final {
        return hash == HASHID;
    }

    const coid::tokenhash& intergen_interface_name() const override final {
        return IFCNAME();
    }

    static const coid::token& intergen_default_creator_static( backend bck ) {
        static constexpr coid::token _dc("ot::video_recorder.create@2946773048"_T);
        static constexpr coid::token _djs("ot::video_recorder@wrapper.js"_T);
        static constexpr coid::token _djsc("ot::video_recorder@wrapper.jsc"_T);
        static constexpr coid::token _dlua("ot::video_recorder@wrapper.lua"_T);
        static constexpr coid::token _dnone;

        switch(bck) {
        case backend::cxx: return _dc;
        case backend::js:  return _djs;
        case backend::jsc: return _djsc;
        case backend::lua: return _dlua;
        default: return _dnone;
        }
    }

    //@return cached active interface of given host class
    //@note host side helper
    static iref<video_recorder> intergen_active_interface(::framebuffer* host);

    template<enum class backend B>
    static void* intergen_wrapper_cache() {
        static void* _cached_wrapper=0;
        if (!_cached_wrapper) {
            const coid::token& tok = intergen_default_creator_static(B);
            _cached_wrapper = coid::interface_register::get_interface_creator(tok);
        }
        return _cached_wrapper;
    }

    void* intergen_wrapper( backend bck ) const override final {
        switch(bck) {
        case backend::js:  return intergen_wrapper_cache<backend::js>();
        case backend::jsc: return intergen_wrapper_cache<backend::jsc>();
        case backend::lua: return intergen_wrapper_cache<backend::lua>();
        default: return 0;
        }
    }

    backend intergen_backend() const override { return backend::cxx; }

    const coid::token& intergen_default_creator( backend bck ) const override final {
        return intergen_default_creator_static(bck);
    }

    ///Client registrator
    template<class C>
    static int register_client()
    {
        static_assert(std::is_base_of<video_recorder, C>::value, "not a base class");

        typedef intergen_interface* (*fn_client)();
        fn_client cc = []() -> intergen_interface* { return new C; };

        coid::token type = typeid(C).name();
        type.consume("class ");
        type.consume("struct ");

        coid::charstr tmp = "ot::video_recorder"_T;
        tmp << "@client-2946773048"_T << '.' << type;

        coid::interface_register::register_interface_creator(tmp, cc);
        return 0;
    }

protected:

    static coid::comm_mutex& share_lock() {
        static coid::comm_mutex _mx(500, false);
        return _mx;
    }

    ///Cleanup routine called from ~video_recorder()
    static void _cleaner_callback(video_recorder* m, intergen_interface* ifc) {
        m->assign_safe(ifc, 0);
    }

    bool assign_safe(intergen_interface* client__, iref<video_recorder>* pout);

    typedef void (*cleanup_fn)(video_recorder*, intergen_interface*);
    cleanup_fn _cleaner = 0;

    bool set_host(policy_intrusive_base*, intergen_interface*, iref<video_recorder>* pout);
};

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> video_recorder::create( T* _subclass_ )
{
    typedef iref<T> (*fn_creator)(video_recorder*);

    static fn_creator create = 0;
    static constexpr coid::token ifckey = "ot::video_recorder.create@2946773048"_T;

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("create"_T, "ot::video_recorder.create"_T, "@2946773048"_T);
        return 0;
    }

    return create(_subclass_);
}

#pragma warning(push)
#pragma warning(disable : 4191)

inline bool video_recorder::record( bool on )
{ return VT_CALL(bool,(bool),0)(on); }

#pragma warning(pop)

} //namespace

#endif //_INTERGEN_GENERATED__video_recorder_H_
