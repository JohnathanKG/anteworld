#pragma once

#ifndef _INTERGEN_GENERATED__jsb_H_
#define _INTERGEN_GENERATED__jsb_H_

//@file Interface file for jsb interface generated by intergen
//See LICENSE file for copyright and license information

//host class: ::jsbsim_plane

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>

#include <ot/object.h>
#include <ot/geomob.h>
#include <ot/jsb.h>
#include <ot/sndgrp.h>
#include <ot/action_cfg.h>
#include <ot/vehicle_cfg.h>
#include <ot/explosion_params.h>

class jsbsim_plane;


namespace ot {

////////////////////////////////////////////////////////////////////////////////
///
/// JSB INTERFACE //////////////////////////////////////////////////////////
///
///JSBSim interface
class jsb
    : public intergen_interface
{
public:

    // --- interface methods ---

    ///
    double operator()( const char* key ) const;

    void operator()( const char* key, double value );

    // --- creators ---

    ///Internal constructor
    static iref<jsb> _get_jsb( jsbsim_plane* p ) {
        return _get_jsb<jsb>(0, p);
    }

    template<class T>
    static iref<T> _get_jsb( T* _subclass_, jsbsim_plane* p );

    // --- internal helpers ---

    ///Interface revision hash
    static const int HASHID = 265107965u;

    ///Interface name (full ns::class string)
    static const coid::tokenhash& IFCNAME() {
        static const coid::tokenhash _name = "ot::jsb"_T;
        return _name;
    }

    int intergen_hash_id() const override final { return HASHID; }

    bool iface_is_derived( int hash ) const override final {
        return hash == HASHID;
    }

    const coid::tokenhash& intergen_interface_name() const override final {
        return IFCNAME();
    }

    static const coid::token& intergen_default_creator_static( backend bck ) {
        static constexpr coid::token _dc(""_T);
        static constexpr coid::token _djs("ot::jsb@wrapper.js"_T);
        static constexpr coid::token _djsc("ot::jsb@wrapper.jsc"_T);
        static constexpr coid::token _dlua("ot::jsb@wrapper.lua"_T);
        static constexpr coid::token _dnone;

        switch(bck) {
        case backend::cxx: return _dc;
        case backend::js:  return _djs;
        case backend::jsc: return _djsc;
        case backend::lua: return _dlua;
        default: return _dnone;
        }
    }

    template<enum class backend B>
    static void* intergen_wrapper_cache() {
        static void* _cached_wrapper=0;
        if (!_cached_wrapper) {
            const coid::token& tok = intergen_default_creator_static(B);
            _cached_wrapper = coid::interface_register::get_interface_creator(tok);
        }
        return _cached_wrapper;
    }

    void* intergen_wrapper( backend bck ) const override final {
        switch(bck) {
        case backend::js:  return intergen_wrapper_cache<backend::js>();
        case backend::jsc: return intergen_wrapper_cache<backend::jsc>();
        case backend::lua: return intergen_wrapper_cache<backend::lua>();
        default: return 0;
        }
    }

    backend intergen_backend() const override { return backend::cxx; }

    const coid::token& intergen_default_creator( backend bck ) const override final {
        return intergen_default_creator_static(bck);
    }

    ///Client registrator
    template<class C>
    static int register_client()
    {
        static_assert(std::is_base_of<jsb, C>::value, "not a base class");

        typedef intergen_interface* (*fn_client)();
        fn_client cc = []() -> intergen_interface* { return new C; };

        coid::token type = typeid(C).name();
        type.consume("class ");
        type.consume("struct ");

        coid::charstr tmp = "ot::jsb"_T;
        tmp << "@client-265107965"_T << '.' << type;

        coid::interface_register::register_interface_creator(tmp, cc);
        return 0;
    }

protected:

    bool set_host(policy_intrusive_base*, intergen_interface*, iref<jsb>* pout);
};

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> jsb::_get_jsb( T* _subclass_, jsbsim_plane* p )
{
    typedef iref<T> (*fn_creator)(jsb*, jsbsim_plane*);

    static fn_creator create = 0;
    static constexpr coid::token ifckey = "ot::jsb._get_jsb@265107965"_T;

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("_get_jsb"_T, "ot::jsb._get_jsb"_T, "@265107965"_T);
        return 0;
    }

    return create(_subclass_, p);
}

#pragma warning(push)
#pragma warning(disable : 4191)

inline double jsb::operator()( const char* key ) const
{ return VT_CALL(double,(const char*) const,0)(key); }

inline void jsb::operator()( const char* key, double value )
{ return VT_CALL(void,(const char*,double),1)(key,value); }

#pragma warning(pop)

} //namespace

#endif //_INTERGEN_GENERATED__jsb_H_
