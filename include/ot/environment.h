#pragma once

#ifndef _INTERGEN_GENERATED__environment_H_
#define _INTERGEN_GENERATED__environment_H_

//@file Interface file for environment interface generated by intergen
//See LICENSE file for copyright and license information

//host class: ::WorldView

#include <comm/commexception.h>
#include <comm/intergen/ifc.h>

#include <ot/env.h>

class WorldView;


namespace ot {

////////////////////////////////////////////////////////////////////////////////
///OT environment interface ////////////////////////////////////////////////
class environment
    : public intergen_interface
{
public:

    // --- interface methods ---

#pragma warning(push)
#pragma warning(disable : 4191)

    ///Save environment config if it was modified
    void save_changed_config()
    { return VT_CALL(void,(),0)(); }

    void get_atmospheric_params( ifc_out ot::atmospheric_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::atmospheric_params&,bool) const,1)(dst,def); }

    void get_water_params( ifc_out ot::water_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::water_params&,bool) const,2)(dst,def); }

    void get_fog_params( ifc_out ot::fog_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::fog_params&,bool) const,3)(dst,def); }

    void get_forest_params( ifc_out ot::forest_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::forest_params&,bool) const,4)(dst,def); }

    void get_snow_params( ifc_out ot::snow_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::snow_params&,bool) const,5)(dst,def); }

    void get_weather_params( ifc_out ot::weather_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::weather_params&,bool) const,6)(dst,def); }

    void get_cloud_params( ifc_out ot::cloud_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::cloud_params&,bool) const,7)(dst,def); }

    void get_water_state_params( ifc_out ot::water_state_params& dst, bool def = false ) const
    { return VT_CALL(void,(ot::water_state_params&,bool) const,8)(dst,def); }

    void set_atmospheric_params( const ot::atmospheric_params& src )
    { return VT_CALL(void,(const ot::atmospheric_params&),9)(src); }

    void set_water_params( const ot::water_params& src )
    { return VT_CALL(void,(const ot::water_params&),10)(src); }

    void set_fog_params( const ot::fog_params& src )
    { return VT_CALL(void,(const ot::fog_params&),11)(src); }

    void set_forest_params( const ot::forest_params& src )
    { return VT_CALL(void,(const ot::forest_params&),12)(src); }

    void set_snow_params( const ot::snow_params& src )
    { return VT_CALL(void,(const ot::snow_params&),13)(src); }

    void set_weather_params( const ot::weather_params& src )
    { return VT_CALL(void,(const ot::weather_params&),14)(src); }

    void set_cloud_params( const ot::cloud_params& src )
    { return VT_CALL(void,(const ot::cloud_params&),15)(src); }

    void set_water_state_params( const ot::water_state_params& src )
    { return VT_CALL(void,(const ot::water_state_params&),16)(src); }

    void set_rain_min_cam_dist( float dist )
    { return VT_CALL(void,(float),17)(dist); }

    //@return wind speed at given height above the ground
    float wind_speed_at_height( float h ) const
    { return VT_CALL(float,(float) const,18)(h); }

    int64 get_day_of_year() const
    { return VT_CALL(int64,() const,19)(); }

    double get_time_of_day() const
    { return VT_CALL(double,() const,20)(); }

    float get_timeflow_multiplier() const
    { return VT_CALL(float,() const,21)(); }

    //@param dyear day of year
    //@param tday UTC time [msec]
    //@param flowm time flow multiplier
    void set_time( int64 dyear, double tday, float flowm = 1.0f )
    { return VT_CALL(void,(int64,double,float),22)(dyear,tday,flowm); }

    ///Set ocean wave amplitude and surf wave amplitude
    void set_sea_params( float wave_amp, float surf_amp, float wave_len, float foam )
    { return VT_CALL(void,(float,float,float,float),23)(wave_amp,surf_amp,wave_len,foam); }

    ///Get ocean wave params
    void get_sea_params( ifc_out float& wave_amp, ifc_out float& surf_amp, ifc_out float& wave_len, ifc_out float& foam ) const
    { return VT_CALL(void,(float&,float&,float&,float&) const,24)(wave_amp,surf_amp,wave_len,foam); }

#pragma warning(pop)
    // --- creators ---

    static iref<environment> get() {
        return get<environment>(0);
    }

    template<class T>
    static iref<T> get( T* _subclass_ );

    // --- internal helpers ---

    ///Interface revision hash
    static const int HASHID = 3141059180u;

    ///Interface name (full ns::class string)
    static const coid::tokenhash& IFCNAME() {
        static const coid::tokenhash _name = "ot::environment"_T;
        return _name;
    }

    int intergen_hash_id() const override final { return HASHID; }

    bool iface_is_derived( int hash ) const override final {
        return hash == HASHID;
    }

    const coid::tokenhash& intergen_interface_name() const override final {
        return IFCNAME();
    }

    static const coid::token& intergen_default_creator_static( backend bck ) {
        static constexpr coid::token _dc("ot::environment.get@3141059180"_T);
        static constexpr coid::token _djs("ot::environment@wrapper.js"_T);
        static constexpr coid::token _djsc("ot::environment@wrapper.jsc"_T);
        static constexpr coid::token _dlua("ot::environment@wrapper.lua"_T);
        static constexpr coid::token _dnone;

        switch(bck) {
        case backend::cxx: return _dc;
        case backend::js:  return _djs;
        case backend::jsc: return _djsc;
        case backend::lua: return _dlua;
        default: return _dnone;
        }
    }


#if _MSC_VER == 0 || _MSC_VER >= 1920
    template<enum backend B>
#else
    template<enum class backend B>
#endif
    static void* intergen_wrapper_cache() {
        static void* _cached_wrapper=0;
        if (!_cached_wrapper) {
            const coid::token& tok = intergen_default_creator_static(B);
            _cached_wrapper = coid::interface_register::get_interface_creator(tok);
        }
        return _cached_wrapper;
    }

    void* intergen_wrapper( backend bck ) const override final {
        switch(bck) {
        case backend::js:  return intergen_wrapper_cache<backend::js>();
        case backend::jsc: return intergen_wrapper_cache<backend::jsc>();
        case backend::lua: return intergen_wrapper_cache<backend::lua>();
        default: return 0;
        }
    }

    backend intergen_backend() const override { return backend::cxx; }

    const coid::token& intergen_default_creator( backend bck ) const override final {
        return intergen_default_creator_static(bck);
    }

    ///Client registrator
    template<class C>
    static int register_client()
    {
        static_assert(std::is_base_of<environment, C>::value, "not a base class");

        typedef intergen_interface* (*fn_client)();
        fn_client cc = []() -> intergen_interface* { return new C; };

        coid::token type = typeid(C).name();
        type.consume("class ");
        type.consume("struct ");

        coid::charstr tmp = "ot::environment"_T;
        tmp << "@client-3141059180"_T << '.' << type;

        coid::interface_register::register_interface_creator(tmp, cc);
        return 0;
    }

protected:

    bool set_host(policy_intrusive_base*, intergen_interface*, iref<environment>* pout);
};

////////////////////////////////////////////////////////////////////////////////
template<class T>
inline iref<T> environment::get( T* _subclass_ )
{
    typedef iref<T> (*fn_creator)(environment*);

    static fn_creator create = 0;
    static constexpr coid::token ifckey = "ot::environment.get@3141059180"_T;

    if (!create)
        create = reinterpret_cast<fn_creator>(
            coid::interface_register::get_interface_creator(ifckey));

    if (!create) {
        log_mismatch("get"_T, "ot::environment.get"_T, "@3141059180"_T);
        return 0;
    }

    return create(_subclass_);
}

} //namespace

#endif //_INTERGEN_GENERATED__environment_H_
